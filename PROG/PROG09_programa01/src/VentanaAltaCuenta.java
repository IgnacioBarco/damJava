
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Nacho
 */

public class VentanaAltaCuenta extends javax.swing.JPanel {

    boolean verificacion, verificacion2;
    /**
     * Creates new form VentanaAltaCuenta
     */
    public VentanaAltaCuenta() {
        initComponents();
        jLabel3.setVisible(false);
        jLabel4.setVisible(false);
        jLabel5.setVisible(false);
        jTFTextoVariable.setVisible(false);
        jTFTipoInteres.setVisible(false);
        jTFcomisionFija.setVisible(false);
    }
    
    public JPanel VentanaAltaCuenta(String diferenciador) {
        System.out.println("Se ha pulsado el boton "+diferenciador);
        return this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupCuenta = new javax.swing.ButtonGroup();
        buttonGroupCuentaCorriente = new javax.swing.ButtonGroup();
        botonDarAltaEnFormulario = new javax.swing.JButton();
        jTFNombre = new javax.swing.JTextField();
        jTFApellidos = new javax.swing.JTextField();
        jLNombre = new javax.swing.JLabel();
        jLApellidos = new javax.swing.JLabel();
        jLFecha = new javax.swing.JLabel();
        jFTextFecha = new javax.swing.JFormattedTextField();
        jRBCuentaAhorro = new javax.swing.JRadioButton();
        jRBCuentaCorriente = new javax.swing.JRadioButton();
        jRBCuentaCorrientePersonal = new javax.swing.JRadioButton();
        jRBCuentaCorrienteEmpresa = new javax.swing.JRadioButton();
        jLTipoCuenta = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTFSaldo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jFTFCcc = new javax.swing.JFormattedTextField();
        jLabelModificable = new javax.swing.JLabel();
        jTFTextoVariable = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTFTipoInteres = new javax.swing.JTextField();
        jTFcomisionFija = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(204, 204, 204));

        botonDarAltaEnFormulario.setText("Dar de alta");
        botonDarAltaEnFormulario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDarAltaEnFormularioActionPerformed(evt);
            }
        });

        jTFNombre.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTFApellidos.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLNombre.setText("Nombre:");

        jLApellidos.setText("Apellidos");

        jLFecha.setText("Fecha de nacimiento");

        try {
            jFTextFecha.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFTextFecha.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFTextFecha.setToolTipText("dd/mm/aaaa Apartir del a√±o 2000");
        jFTextFecha.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        buttonGroupCuenta.add(jRBCuentaAhorro);
        jRBCuentaAhorro.setText("Cuenta de ahorro");
        jRBCuentaAhorro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBCuentaAhorroActionPerformed(evt);
            }
        });

        buttonGroupCuenta.add(jRBCuentaCorriente);
        jRBCuentaCorriente.setText("Cuenta Corriente");
        jRBCuentaCorriente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBCuentaCorrienteActionPerformed(evt);
            }
        });

        buttonGroupCuentaCorriente.add(jRBCuentaCorrientePersonal);
        jRBCuentaCorrientePersonal.setSelected(true);
        jRBCuentaCorrientePersonal.setText("Personal");
        jRBCuentaCorrientePersonal.setEnabled(false);
        jRBCuentaCorrientePersonal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBCuentaCorrientePersonalActionPerformed(evt);
            }
        });

        buttonGroupCuentaCorriente.add(jRBCuentaCorrienteEmpresa);
        jRBCuentaCorrienteEmpresa.setText("Empresa");
        jRBCuentaCorrienteEmpresa.setEnabled(false);
        jRBCuentaCorrienteEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBCuentaCorrienteEmpresaActionPerformed(evt);
            }
        });

        jLTipoCuenta.setText("Tip de cuenta:");

        jLabel1.setText("Saldo Inicial");

        jTFSaldo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFSaldo.setToolTipText("");

        jLabel2.setText("CCC");

        try {
            jFTFCcc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-####-##-##########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFTFCcc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFTFCcc.setToolTipText("");

        jLabel3.setText(" ");

        jLabel4.setText("Tipo de interes por descubierto");

        jLabel5.setText("Comision fija por cada descubierto");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLApellidos)
                            .addComponent(jLFecha)
                            .addComponent(jLTipoCuenta)
                            .addComponent(jLNombre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFNombre)
                            .addComponent(jTFApellidos)
                            .addComponent(jFTextFecha)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jRBCuentaAhorro)
                        .addGap(35, 35, 35)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRBCuentaCorrienteEmpresa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jRBCuentaCorriente)
                                .addGap(18, 18, 18)
                                .addComponent(jRBCuentaCorrientePersonal, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(botonDarAltaEnFormulario))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFSaldo)
                            .addComponent(jFTFCcc)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelModificable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFTextoVariable)
                            .addComponent(jTFcomisionFija)
                            .addComponent(jTFTipoInteres))))
                .addGap(65, 65, 65))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLNombre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLApellidos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFTextFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLFecha))
                .addGap(18, 18, 18)
                .addComponent(jLTipoCuenta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRBCuentaAhorro)
                            .addComponent(jRBCuentaCorriente)
                            .addComponent(jRBCuentaCorrientePersonal))
                        .addGap(18, 18, 18)
                        .addComponent(jRBCuentaCorrienteEmpresa))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTFSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFTFCcc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelModificable)
                        .addComponent(jTFTextoVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTFTipoInteres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTFcomisionFija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(botonDarAltaEnFormulario)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * pinta el jpanel al dar al radiobutton de cuenta corriente
     * @param evt 
     *//**
     * pinta el jpanel al dar al boton de cuenta corriente
     * @param evt 
     */
    private void jRBCuentaCorrienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBCuentaCorrienteActionPerformed
        System.out.println("Se ha pulsado el boton cuenta corriente");
            jRBCuentaCorrienteEmpresa.setEnabled(true);
            jRBCuentaCorrientePersonal.setEnabled(true);
            
            if (jRBCuentaCorrientePersonal.isSelected()){
                jLabel3.setText("Comision de Mantenimiento");
                jLabel4.setVisible(false);
                jLabel5.setVisible(false);
                jTFTipoInteres.setVisible(false);
                jTFcomisionFija.setVisible(false);
                
            } else {
                jLabel3.setText("Maximo Descubierto");
                jLabel4.setVisible(true);
                jLabel5.setVisible(true);
                jTFTipoInteres.setVisible(true);
                jTFcomisionFija.setVisible(true);
            }
            jLabel3.setVisible(true);
            jLabel3.setVisible(true);
            jTFTextoVariable.setVisible(true);
            
            
    }//GEN-LAST:event_jRBCuentaCorrienteActionPerformed

    /***
     * pulsar boton dar de alta
     * @param evt 
     */
    private void botonDarAltaEnFormularioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDarAltaEnFormularioActionPerformed
        //si no esta seleccionada ninguna cuenta muestra mensaje de error
        if (!jRBCuentaAhorro.isSelected() & !jRBCuentaCorriente.isSelected()){
            System.out.println("No hay ningun tipo de cuenta marcado");
            mostrarMensaje(this,"No hay ningun tipo de cuenta marcado" );
        
        } else {
            
            //si es una cuenta de ahorro
            if (jRBCuentaAhorro.isSelected()){
                System.out.println("Pulsado cuenta ahorro");
                
                //si todos los campos son validos
                if (verificarFormulario()){
                    //creamos un objeto persona
                    Persona nuevoTitular = new Persona(jTFNombre.getText(),jTFApellidos.getText(),jFTextFecha.getText());
                    //cramos la cuenta
                    CuentaAhorro nuevaCuentaAhorro = 
                            new CuentaAhorro(
                                    nuevoTitular,
                                    Double.valueOf(jTFSaldo.getText()),
                                    jFTFCcc.getText(),
                                    Double.valueOf(jTFTextoVariable.getText()));
                    //a√±adimos la cuenta al listado de cuentas
                    AplicacionCuentaBancaria.cuentaBancaria.listadoObjetos.add(nuevaCuentaAhorro);
                    
                    mostrarMensaje(this, "Cuenta de ahorro creada");
                    
                    //a√±adimos a la jtable la cuenta nueva
                    String datos = jTFNombre.getText()+","+jFTFCcc.getText()+","+Double.valueOf(jTFSaldo.getText());
                    String[] campos = new String[3];
                    campos=datos.split(",");
                    AplicacionCuentaBancaria.cuentaBancaria.datosTabla.addRow(campos);
                    
                    //a√±adimos al combobox la cuenta nueva
                    AplicacionCuentaBancaria.cuentaBancaria.modeloLista.addElement(jFTFCcc.getText());
                    
                    limpiarCamposAlta();
                }    
             
            //si es una cuenta corriente    
            } else if (jRBCuentaCorriente.isSelected()){
                //si es una cuenta corriente  personal
                if (jRBCuentaCorrientePersonal.isSelected()){
                    System.out.println("pulsado ccpersonal");
                    
                    //si todos los campos son validos
                    if (verificarFormulario()){
                        //creamos un objeto persona
                        Persona nuevoTitular = new Persona(jTFNombre.getText(),jTFApellidos.getText(),jFTextFecha.getText());
                        //creamos una nueva cuenta
                        CuentaCorrientePersonal nuevaCuentaCorrientePersonal = 
                                new CuentaCorrientePersonal(
                                        nuevoTitular, 
                                        Double.valueOf(jTFSaldo.getText()), 
                                        jFTFCcc.getText(), 
                                        Double.valueOf(jTFTextoVariable.getText()));
                        
                        //a√±adimos la cuenta al listado de cuentas
                        AplicacionCuentaBancaria.cuentaBancaria.listadoObjetos.add(nuevaCuentaCorrientePersonal);
                        mostrarMensaje(this, "Cuenta corriente personal creada");
                        
                        //a√±adimos a la jtable la cuenta nueva
                        String datos = jTFNombre.getText()+","+jFTFCcc.getText()+","+Double.valueOf(jTFSaldo.getText());
                        String[] campos = new String[3];
                        campos=datos.split(",");
                        AplicacionCuentaBancaria.cuentaBancaria.datosTabla.addRow(campos);
                        
                        //a√±adimos al combobox la cuenta nueva
                        AplicacionCuentaBancaria.cuentaBancaria.modeloLista.addElement(jFTFCcc.getText());
                        
                        limpiarCamposAlta();
                    }    
                
                //si es una cuenta corriente  de empresa
                } else if(jRBCuentaCorrienteEmpresa.isSelected()){
                    System.out.println("pulsado ccempresa"); 
                    
                    //si todos los campos son validos
                    if (verificarFormulario()){
                        //creamos un objeto persona
                        Persona nuevoTitular = new Persona(jTFNombre.getText(),jTFApellidos.getText(),jFTextFecha.getText());
                        //creamos una cuenta
                        CuentaCorrienteEmpresa nuevaCuentaCorrienteEmpresa = 
                                new CuentaCorrienteEmpresa(
                                        nuevoTitular, 
                                        Double.valueOf(jTFSaldo.getText()), 
                                        jFTFCcc.getText(), 
                                        Double.valueOf(jTFTextoVariable.getText()), 
                                        Double.valueOf(jTFTipoInteres.getText()), 
                                        Double.valueOf(jTFcomisionFija.getText()));
                        //a√±adimos la cuenta al listado de cuentas
                        AplicacionCuentaBancaria.cuentaBancaria.listadoObjetos.add(nuevaCuentaCorrienteEmpresa);
                        mostrarMensaje(this, "Cuenta corriente de empresa creada");
                        
                        //a√±adimos a la jtable la cuenta nueva
                        String datos = jTFNombre.getText()+","+jFTFCcc.getText()+","+Double.valueOf(jTFSaldo.getText());
                        String[] campos = new String[3];
                        campos=datos.split(",");
                        AplicacionCuentaBancaria.cuentaBancaria.datosTabla.addRow(campos);
                        
                        //a√±adimos al combobox la cuenta nueva
                        AplicacionCuentaBancaria.cuentaBancaria.modeloLista.addElement(jFTFCcc.getText());
                        
                        limpiarCamposAlta();
                    }
                }
                
                
            }

                

            for (CuentaBancaria obj : AplicacionCuentaBancaria.cuentaBancaria.listadoObjetos) {
                System.out.println(obj.getClass().toString()+" lll "+obj.toString());
            }
        
        }
    }//GEN-LAST:event_botonDarAltaEnFormularioActionPerformed

    /**
     * pinta el jpanel al dar al radiobuton de cuenta de ahorro
     * @param evt 
    */
    private void jRBCuentaAhorroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBCuentaAhorroActionPerformed
        
        System.out.println("Se ha pulsado el boton cuenta de ahorro");
        jRBCuentaCorrienteEmpresa.setEnabled(false);
        jRBCuentaCorrientePersonal.setEnabled(false);
        jLabel3.setText("Tipo de interes");
        jLabel3.setVisible(true);
        jTFTextoVariable.setVisible(true);
        jLabel4.setVisible(false);
        jLabel5.setVisible(false);
        jTFTipoInteres.setVisible(false);
        jTFcomisionFija.setVisible(false);
            
            
        
    }//GEN-LAST:event_jRBCuentaAhorroActionPerformed

    /**
     * pinta el jpanel al dar al radiobuton de cuenta corriente personal
     * @param evt 
    */
    private void jRBCuentaCorrientePersonalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBCuentaCorrientePersonalActionPerformed
        jLabel3.setText("Comision de Mantenimiento");
        jLabel4.setVisible(false);
        jLabel5.setVisible(false);
        jTFTipoInteres.setVisible(false);
        jTFcomisionFija.setVisible(false);
    }//GEN-LAST:event_jRBCuentaCorrientePersonalActionPerformed

    /**
     * pinta el jpanel al dar al radiobuton de cuenta corriente de empresa
     * @param evt 
    */
    private void jRBCuentaCorrienteEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBCuentaCorrienteEmpresaActionPerformed
        jLabel3.setText("Maximo Descubierto");
        jLabel4.setVisible(true);
        jLabel5.setVisible(true);
        jTFTipoInteres.setVisible(true);
        jTFcomisionFija.setVisible(true);
    }//GEN-LAST:event_jRBCuentaCorrienteEmpresaActionPerformed

    /**
     * Limpia los campos
     */
    public void limpiarCamposAlta(){
        jTFApellidos.setText("");
        jTFNombre.setText("");
        jTFSaldo.setText("");
        jTFTextoVariable.setText("");
        jTFTipoInteres.setText("");
        jTFcomisionFija.setText("");
        jFTFCcc.setText("");
        jFTextFecha.setText("");    
    }
    
    /**
     * verifica los datos introducidos
     * @return true si son todos validos
     */
    public boolean verificarFormulario(){
        verificacion=true;
        
        //aqui validamos la parte comun a todas las cuentas
        //nombre
        if (jTFNombre.getText().equals("")){
            mostrarMensaje(this, "El campo nombre no puede estar vacio");
            verificacion=false;
        } else if(!jTFNombre.getText().matches("[a-zA-Z]*")) {
            mostrarMensaje(this, "El campo nombre solo puede contener letras");
            verificacion=false;
        }
            
        
        //apellidos
        if (jTFApellidos.getText().equals("")){
            mostrarMensaje(this, "El campo de los apellidos no puede estar vacio");
            verificacion=false;
        } else if(!jTFApellidos.getText().matches("[a-zA-Z]*")) {
            mostrarMensaje(this, "El campo apellidos solo puede contener letras");
            verificacion=false;
        }
        
        //fecha
        if (jFTextFecha.getText().equals("  /  /    ")){
            mostrarMensaje(this, "El campo de la fecha de nacimiento no puede estar vacio");
            verificacion=false;
        } else if (!validarFecha(jFTextFecha.getText())){
            System.out.println(jFTextFecha.getText());
            verificacion=false;
        }
        
        //saldo
        if (jTFSaldo.getText().equals("")){
            mostrarMensaje(this, "El campo del saldo no puede estar vacio");
            verificacion=false;
        } else if(!validarDouble(jTFSaldo.getText(), "del campo saldo")){
            verificacion=false;
        }
        
        if (jFTFCcc.getText().equals("    -    -  -          ")){
            mostrarMensaje(this, "El campo del CCC no puede estar vacio");
            verificacion=false;
        } else if (!verificarCCC()){
                verificacion=false;
            }    
               
        
        //aqui dependiendo del tipo de cuenta validamos el resto de campos
        
        if (jRBCuentaAhorro.isSelected()){ 
        
            //tipo de interes
            if(jTFTextoVariable.getText().equals("")){
                mostrarMensaje(this, "El campo del tipo de interes no puede estar vacio");
                verificacion=false;
            }  else if(!validarDoublePorcentaje(jTFTextoVariable.getText(), jLabel3.getText())){
            verificacion=false;
            }
        
        //parte comun de cuenta corrientes    
        } else if (jRBCuentaCorriente.isSelected()){
            
            //cuenta corriente personal
            if (jRBCuentaCorrientePersonal.isSelected()){
                //comision de mant 
                if(jTFTextoVariable.getText().equals("")){
                    mostrarMensaje(this, "El campo del tipo de la comision de mantenimiento no puede estar vacio");
                    verificacion=false;
                }else if(!validarDouble(jTFTextoVariable.getText(), jLabel3.getText())){
                    verificacion=false;
                }
        
            //cuenta corriente de empresa
            }else if (jRBCuentaCorrienteEmpresa.isSelected()){
                
                //max descubierto
                if(jTFTextoVariable.getText().equals("")){
                    mostrarMensaje(this, "El campo del maximo descubierto no puede estar vacio");
                    verificacion=false;
                }  else if(!validarDouble(jTFTextoVariable.getText(), jLabel3.getText())){
                    verificacion=false;
                }
                
                //tipo interes por descubierto
                if(jTFTipoInteres.getText().equals("")){
                    mostrarMensaje(this, "El campo del tipo de interes por descubierto no puede estar vacio");
                    verificacion=false;
                } else if(!validarDoublePorcentaje(jTFTipoInteres.getText(), "del tipo de interes por descubierto")){
                    verificacion=false;
                }
                
                //comision por descubierto
                if(jTFcomisionFija.getText().equals("")){
                    mostrarMensaje(this, "El campo de la comision fija por cada descubierto no puede estar vacio");
                    verificacion=false;
                } else if(!validarDouble(jTFcomisionFija.getText(), "de la comision fija por cada descubierto")){
                    verificacion=false;
                }
                     
            }
        }     
        
        return verificacion;
        
    
    }
    
    /**
     * verificamos que los digitos de control sean correctos
     * @return true si la cuenta es valida
     */
    public boolean verificarCCC(){
        verificacion2=true;
        
        for (CuentaBancaria obj : AplicacionCuentaBancaria.cuentaBancaria.getListadoObjetos()) {
            if (obj.getCcc().equals(jFTFCcc.getText())){
                mostrarMensaje(this, "La cuenta ya esta dada de alta, no se puede dar de alta con el mismo numero de cuenta");
                verificacion2=false;
            }
        }
        
        int primerDigitoControl, segundoDigitoControl;
        String codControl, codControlDado;
    
        String cCc = jFTFCcc.getText();
        cCc=cCc.replace("-", "");
        System.out.println("ccc modif "+cCc);
        
        int e1=(Integer.parseInt(cCc.substring(0,1)))*4;
        int e2=(Integer.parseInt(cCc.substring(1,2)))*8;
        int e3=(Integer.parseInt(cCc.substring(2,3)))*5;
        int e4=(Integer.parseInt(cCc.substring(3,4)))*10;
        int o1=(Integer.parseInt(cCc.substring(4,5)))*9;
        int o2=(Integer.parseInt(cCc.substring(5,6)))*7;
        int o3=(Integer.parseInt(cCc.substring(6,7)))*3;
        int o4=(Integer.parseInt(cCc.substring(7,8)))*6;

        primerDigitoControl=11-((e1+e2+e3+e4+o1+o2+o3+o4)%11);
        if (primerDigitoControl==11){
            primerDigitoControl=0;
        }
        if (primerDigitoControl==10){
            primerDigitoControl=1;
        }

        int c1=(Integer.parseInt(cCc.substring(10,11)))*1;
        int c2=(Integer.parseInt(cCc.substring(11,12)))*2;
        int c3=(Integer.parseInt(cCc.substring(12,13)))*4;
        int c4=(Integer.parseInt(cCc.substring(13,14)))*8;
        int c5=(Integer.parseInt(cCc.substring(14,15)))*5;
        int c6=(Integer.parseInt(cCc.substring(15,16)))*10;
        int c7=(Integer.parseInt(cCc.substring(16,17)))*9;
        int c8=(Integer.parseInt(cCc.substring(17,18)))*7;
        int c9=(Integer.parseInt(cCc.substring(18,19)))*3;
        int c10=(Integer.parseInt(cCc.substring(19,20)))*6;

        segundoDigitoControl=11-((c1+c2+c3+c4+c5+c6+c7+c8+c9+c10)%11);
        if (segundoDigitoControl==11){
            segundoDigitoControl=0;
        }
        if (segundoDigitoControl==10){
            segundoDigitoControl=1;
        }
            
        //comprobamos los datos 
        codControl=cCc.substring(8,10);
        codControlDado=String.valueOf(primerDigitoControl)+String.valueOf(segundoDigitoControl);
        
        //si no son correctos validamos como falso
        if (!codControl.equalsIgnoreCase(codControlDado)){
                mostrarMensaje(this, "Los digitos de control de la cuenta no son validos");
                verificacion2=false;
        }    
        
        return verificacion2;
        
    }
    
    /**
     * validacion de la fecha
     * @param dato
     * @return 
     */
    public boolean validarFecha(String dato){
        
        if (!dato.matches("[0-3][0-9]/[0-1][0-9]/[2][0-9][0-9][0-9]")){
            mostrarMensaje(this, "Formato de fecha erronea");
            return false;
        }
        return true;
    }
         
    /**
     * validamos que el dato sea double y no sea negativo
     * @param dato
     * @param diferenciador
     * @return 
     */
    public boolean validarDouble(String dato, String diferenciador){
        try{
            double aaa=Double.parseDouble(dato); 
            if (aaa<0){
                mostrarMensaje(this, "El campo "+diferenciador+" no puede ser negativo");
                return false;
            }
        } catch (Exception ex){
            mostrarMensaje(this, "El campo "+diferenciador+" no tiene un formato numerico valido");
            return false;
        }
        return true;
    }
    
    /**
     * validamos que el dato sea double y este entre 0 y 100
     * @param dato
     * @param diferenciador
     * @return 
     */
    public boolean validarDoublePorcentaje(String dato, String diferenciador){
        try{
            double aaa=Double.parseDouble(dato); 
            if (!(aaa>=0 & aaa<=100)){
                mostrarMensaje(this, "El campo "+diferenciador+" tiene que estar entre 0 y 100%");
                return false;
            }
        } catch (Exception ex){
            mostrarMensaje(this, "El campo "+diferenciador+" no tiene un formato numerico valido");
            return false;
        }
        return true;
    }
    
    /**
     * muestra mensaje del programa
     * @param frame
     * @param mens 
     */
    public void mostrarMensaje(JPanel frame,String mens){
        JOptionPane.showMessageDialog(frame, mens, "Informaci√≥n del sistema", 
                JOptionPane.INFORMATION_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonDarAltaEnFormulario;
    private javax.swing.ButtonGroup buttonGroupCuenta;
    private javax.swing.ButtonGroup buttonGroupCuentaCorriente;
    private javax.swing.JFormattedTextField jFTFCcc;
    private javax.swing.JFormattedTextField jFTextFecha;
    private javax.swing.JLabel jLApellidos;
    private javax.swing.JLabel jLFecha;
    private javax.swing.JLabel jLNombre;
    private javax.swing.JLabel jLTipoCuenta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelModificable;
    private javax.swing.JRadioButton jRBCuentaAhorro;
    private javax.swing.JRadioButton jRBCuentaCorriente;
    private javax.swing.JRadioButton jRBCuentaCorrienteEmpresa;
    private javax.swing.JRadioButton jRBCuentaCorrientePersonal;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTFApellidos;
    private javax.swing.JTextField jTFNombre;
    private javax.swing.JTextField jTFSaldo;
    private javax.swing.JTextField jTFTextoVariable;
    private javax.swing.JTextField jTFTipoInteres;
    private javax.swing.JTextField jTFcomisionFija;
    // End of variables declaration//GEN-END:variables
}
