
import java.awt.Color;
import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Nacho
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    BorrarDepartamento bd;
    InsertarDatos id;
    SubirComision sc;
    VisualizarDepartamentos vd;
    VisualizarEmpleados ve;
    
    Connection conexion = null;
    String baseDatos = "jdbc:mysql://localhost/empleydepar_nacho";
    String sentenciaSQL;
    String sentenciaSQL2;
    Statement st = null;
    ResultSet resultadoSQL = null;
    ResultSet resultadoSQL2 = null;
            
    String resultadoST;
    
    int dept,cod;
    String nombre,oficio;
    float salarioMedio;
    int numEmpleado=10;
    
    
    public VentanaPrincipal(){
        initComponents();
        
        bd = new BorrarDepartamento(this,true);
        id = new InsertarDatos(this,true);
        sc = new SubirComision(this,true);
        vd = new VisualizarDepartamentos(this,true);
        ve = new VisualizarEmpleados(this,true);
        
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
  }
    
    public void conectarBBDD(){
        try {
            conexion = DriverManager.getConnection(baseDatos,"root","");
            mostrarMensaje("conexion establecida", Color.BLUE);
        } catch (SQLException ex) {
            System.out.println("fallo al conectar la base de datos: "+ex);
        }
    }
    
    public void desconectarBBDD(){
        try {
            conexion.close();
        } catch (SQLException ex) {
            System.out.println("fallo al desconectar la base de datos: "+ex);
        }
    }
    
    public void conectarST(){
        try {
            st = conexion.createStatement();
        } catch (SQLException ex) {
            System.out.println("fallo al establecer el statement: "+ex);
        }
    }
    public void desconectarST(){
        try {
            st.close();
        } catch (SQLException ex) {
            System.out.println("fallo al desconectar el statement: "+ex);
        }
    }
    
    
    
    
    
    public void mostrarMensaje(String mens, Color color){
        jLabel1.setForeground(color);
        jLabel1.setText(mens);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Crear tablas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Insertar registros");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Visualizar empleados");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Visualizar departamentos");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Actualizar comision");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Borrar departamento");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Insertar datos empleado");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addGap(59, 59, 59)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton7)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addGap(59, 59, 59)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(143, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        
        conectarBBDD();
        conectarST();
        
        bd.setVisible(true);
        dept = bd.getDept();
        
        sentenciaSQL = "SELECT * FROM DEPARTAMENTOS WHERE dept_no="+dept;
        sentenciaSQL2 = "SELECT * FROM EMPLEADOS WHERE dept_no="+dept;
        
        
        try {
            resultadoSQL = st.executeQuery(sentenciaSQL);
            
            
            //si hay departamentos con ese codigo
            if (resultadoSQL !=null && resultadoSQL.next()){
                
                //si hay empleados en ese departamento
                resultadoSQL2 = st.executeQuery(sentenciaSQL2);
                //si hay empleados en ese departamento
                if (resultadoSQL2 !=null && resultadoSQL2.next()){
                    JOptionPane.showMessageDialog(this, "No se puede borrar el departamento. \n"
                            + "Tiene empleados asociados a el");
                } else {
                    sentenciaSQL = "DELETE FROM DEPARTAMENTOS WHERE dept_no="+dept;
                    st.executeUpdate(sentenciaSQL);
                    JOptionPane.showMessageDialog(this, "departamento borrado");
                }
                
            } else {
                
                JOptionPane.showMessageDialog(this, "No existe ningun departamento con ese codigo");
            }
        } catch (SQLException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        desconectarST();
        desconectarBBDD();
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        
        conectarBBDD();
        conectarST();
        
        id.setVisible(true);
        
        cod = id.getCod();
        nombre = id.getNom();
        oficio = id.getOfic();
        
        SimpleDateFormat sdm = new SimpleDateFormat("yyyy-MM-dd");
        Date fecha = new Date(); 
        String fechastring = sdm.format(fecha);
        
        sentenciaSQL = "SELECT MAX(emp_no) FROM EMPLEADOS";
        
        
        sentenciaSQL = "SELECT AVG(salario) FROM EMPLEADOS";
        
        
        salarioMedio = 5000;
        
        numEmpleado++;
        
        
        try {
            PreparedStatement pstmt = 
                      conexion.prepareStatement("SELECT * FROM DEPARTAMENTOS "
                              + "WHERE dept_no = ?");
                              
            pstmt.setInt(1, cod);
            
            resultadoSQL = pstmt.executeQuery();
            
            //si hay departamentos con ese codigo
            if (resultadoSQL !=null && resultadoSQL.next()){
             
              PreparedStatement pstmt2 = 
                      conexion.prepareStatement("INSERT INTO EMPLEADOS VALUES ("
                        + numEmpleado+", "
                        + "'"+nombre+"', "
                        + "'"+oficio+"', "
                        + "null, "
                        + "'"+fechastring+"', "
                        + salarioMedio+", "
                        + "0, "
                        + cod+" )");
                
                pstmt2.executeUpdate();
                JOptionPane.showMessageDialog(this, "Usuario creado");

            } else {
                JOptionPane.showMessageDialog(this, "No existe ningun departamento con ese codigo");
            }
        
        } catch (SQLException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        desconectarST();
        desconectarBBDD();
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        sc.setVisible(true);
        //if ver
        float comision = sc.getComision();
        int departamento = sc.getDepartamento();
        
        conectarBBDD();
        conectarST();
        
        sentenciaSQL = "UPDATE EMPLEADOS "
            + "set COMISION=COMISION+"+comision+" "
            + "WHERE DEPT_NO="+departamento;
        
        try {
            st.executeUpdate(sentenciaSQL);
            
        } catch (SQLException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        sentenciaSQL = "UPDATE EMPLEADOS "
            + "set COMISION="+comision+" "
            + "WHERE DEPT_NO="+departamento+" "
                + "AND COMISION IS NULL";
        
        try {
            st.executeUpdate(sentenciaSQL);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
           
        sentenciaSQL = "SELECT * FROM EMPLEADOS";
        
        try {
            resultadoSQL = st.executeQuery(sentenciaSQL);
            ve.visualizarEmpleados(resultadoSQL);
            ve.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        desconectarST();
        desconectarBBDD();
        
        
        
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        conectarBBDD();
        conectarST();
        
        sentenciaSQL = "SELECT "
                + "EMP.EMP_NO, "
                + "EMP.APELLIDO, "
                + "EMP.DIR,"
                + "DIR.APELLIDO,"
                + "EMP.OFICIO,"
                + "EMP.DEPT_NO,"
                + "DEP.DNOMBRE "+
                    "FROM EMPLEADOS EMP " +   
                        "LEFT OUTER JOIN EMPLEADOS DIR ON EMP.DIR=DIR.EMP_NO " +
                        "LEFT OUTER JOIN DEPARTAMENTOS DEP ON EMP.DEPT_NO=DEP.DEPT_NO";
        try {
            resultadoSQL = st.executeQuery(sentenciaSQL);
            ve.actualizarDatos(resultadoSQL);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                    "No se han podido recuperar los datos de los empleados.\n"+ ex);
        }
        
        desconectarST();
        desconectarBBDD();
        
        ve.setVisible(true);
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       
        conectarBBDD();
        conectarST();
        
        sentenciaSQL = "SELECT "
                + "DEP.DEPT_NO, "
                + "DNOMBRE, "
                + "COUNT(EMP.EMP_NO), "
                + "AVG(EMP.SALARIO), "
                + "COUNT(DISTINCT OFICIO) "
            + "FROM DEPARTAMENTOS DEP "
            + "LEFT JOIN EMPLEADOS EMP ON EMP.DEPT_NO = DEP.DEPT_NO "
            + "GROUP BY EMP.DEPT_NO";
        try {
            resultadoSQL = st.executeQuery(sentenciaSQL);
            vd.actualizarDatos(resultadoSQL);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                    "No se han podido recuperar los datos de los empleados.\n"+ ex);
        }
        
        desconectarST();
        desconectarBBDD();
        
        
        
        vd.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        conectarBBDD();
        conectarST();
        
        //creamos la tabla departamentos
        sentenciaSQL=" CREATE TABLE DEPARTAMENTOS("
            + "dept_no smallint not null,"
            + "dnombre varchar(15) not null,"
            + "loc varchar(15) null,"
            + "CONSTRAINT PK_DEP PRIMARY KEY(dept_no))";
        try {
            st.executeUpdate(sentenciaSQL);
            resultadoST = "Tabla departamento creada. \n";
        } catch (SQLException ex) {
            resultadoST = "Fallo al crear la tabla departamento: "+ex+"\n";
        }
        
        //creamos al tabla empleados
        sentenciaSQL="CREATE TABLE EMPLEADOS("
            + " emp_no smallint not null,"
            + " apellido varchar(10) null,"
            + " oficio varchar(10) null,"
            + " dir smallint null,"
            + " fecha_alta date not null,"
            + " salario float not null,"
            + " comision float null,"
            + " dept_no smallint not null,"
            + " CONSTRAINT PK_EMP PRIMARY KEY(emp_no),"
            + " CONSTRAINT FK_DIR FOREIGN KEY(dir) REFERENCES EMPLEADOS(emp_no),"
            + " CONSTRAINT FK_DEP FOREIGN KEY(dept_no) REFERENCES DEPARTAMENTOS(dept_no))";
        try {
            st.executeUpdate(sentenciaSQL);
            resultadoST = resultadoST+ "Tabla empleados creada. ";
        } catch (SQLException ex) {
            resultadoST = resultadoST+ "Fallo al crear la tabla empleados: "+ex;
        }       
        
        JOptionPane.showMessageDialog(this, resultadoST);
        
        desconectarST();
        desconectarBBDD();
            
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        conectarBBDD();
        conectarST();
        
        sentenciaSQL="INSERT INTO DEPARTAMENTOS VALUES(1,'AAAA','MADRID')";
        try {   
            st.executeUpdate(sentenciaSQL);
            resultadoST="Departamento 1 creado. \n";
        } catch (SQLException ex) {
            resultadoST="Fallo al crear el departamento 1: "+ex+"\n";
        }
        
        sentenciaSQL="INSERT INTO DEPARTAMENTOS VALUES(2,'BBBB','TALAVERA')";
        try {   
            st.executeUpdate(sentenciaSQL);
            resultadoST = resultadoST + "Departamento 2 creado. \n";
        } catch (SQLException ex) {
            resultadoST = resultadoST + "Fallo al crear el departamento 2: "+ex+"\n";
        }
        
        sentenciaSQL="INSERT INTO DEPARTAMENTOS VALUES(3,'CCC','CACERES')";
        try {    
            st.executeUpdate(sentenciaSQL);
            resultadoST= resultadoST + "Departamento 3 creado.";
        } catch (SQLException ex) {
            resultadoST = resultadoST + "Fallo al crear el departamento 3: "+ex;
        }
        
        resultadoST = resultadoST + "\n---------------------------\n";
        
        sentenciaSQL="INSERT INTO EMPLEADOS VALUES"
                + "(1,'EMP1','JEFE',NULL,'2000-01-01',50000,10,1)";
        try {    
            st.executeUpdate(sentenciaSQL);
            resultadoST= resultadoST + "Empleado 1 creado.\n";
        } catch (SQLException ex) {
            resultadoST = resultadoST + "Fallo al crear el empleado 1: "+ex+"\n";
        }
        
        sentenciaSQL="INSERT INTO EMPLEADOS VALUES"
                + "(2,'EMP2','EMPLEADO',1,'2015-02-02',22000,5,1)";
        try {    
            st.executeUpdate(sentenciaSQL);
            resultadoST= resultadoST + "Empleado 2 creado.\n";
        } catch (SQLException ex) {
            resultadoST = resultadoST + "Fallo al crear el Empleado 2: "+ex+"\n";
        }
        
        sentenciaSQL="INSERT INTO EMPLEADOS VALUES"
                + "(3,'EMP3','EMPLEADO',1,'2015-03-03',23000,5,1)";
        try {    
            st.executeUpdate(sentenciaSQL);
            resultadoST= resultadoST + "Empleado 3 creado.\n";
        } catch (SQLException ex) {
            resultadoST = resultadoST + "Fallo al crear el Empleado 3: "+ex+"\n";
        }
        
        sentenciaSQL="INSERT INTO EMPLEADOS VALUES"
                + "(4,'EMP4','JEFE',NULL,'2000-04-04',50000,10,2)";
        try {    
            st.executeUpdate(sentenciaSQL);
            resultadoST= resultadoST + "Empleado 4 creado.\n";
        } catch (SQLException ex) {
            resultadoST = resultadoST + "Fallo al crear el Empleado 4: "+ex+"\n";
        }
        
        sentenciaSQL="INSERT INTO EMPLEADOS VALUES"
                + "(5,'EMP5','EMPLEADO',4,'2016-05-05',25000,NULL,2)";
        try {    
            st.executeUpdate(sentenciaSQL);
            resultadoST= resultadoST + "Empleado 5 creado.\n";
        } catch (SQLException ex) {
            resultadoST = resultadoST + "Fallo al crear el Empleado 5: "+ex+"\n";
        }
        
        sentenciaSQL="INSERT INTO EMPLEADOS VALUES"
                + "(6,'EMP6','EMPLEADO',4,'2016-06-06',26000,NULL,2)";
        try {    
            st.executeUpdate(sentenciaSQL);
            resultadoST= resultadoST + "Empleado 6 creado.\n";
        } catch (SQLException ex) {
            resultadoST = resultadoST + "Fallo al crear el Empleado 6: "+ex+"\n";
        }
                
        JOptionPane.showMessageDialog(this, resultadoST);
        
        desconectarST();
        desconectarBBDD();        
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
