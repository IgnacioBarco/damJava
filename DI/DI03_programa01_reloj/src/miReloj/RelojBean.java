package miReloj;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import java.awt.event.ActionEvent ;
import java.awt.event.ActionListener;
import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.Timer;

/**
 *
 * @author Nacho
 */
public class RelojBean extends javax.swing.JPanel implements Serializable, ActionListener {

    private Timer timer;
    private GregorianCalendar horaActual;
    private String horas, minutos, segundos;
    private int horaAlarma, minutosAlarma;
    private Color color;
    
    private boolean format24H = false;
    private Alarma alarm;
    
    public RelojBean() {
        initComponents();
        alarm = new Alarma();
        cambiaHora();
        
    }
    
    /**
     * Ponemos un contador cada medio segundo, para que actualice la hora
     */
    private void cambiaHora(){
        timer = new Timer (1000, new ActionListener () { 
           public void actionPerformed(ActionEvent e) { 
            horaActual = new GregorianCalendar();
            
            if (!isFormat24H()){
                if(horaActual.get(Calendar.AM_PM)==1){
                    jLabel_AmPm.setText("PM");
                } else {
                    jLabel_AmPm.setText("AM");
                }
                if(horaActual.get(Calendar.HOUR)<10){
                    horas="0"+String.valueOf(horaActual.get(Calendar.HOUR));
                } else {
                    horas=String.valueOf(horaActual.get(Calendar.HOUR));
            }
             
               
            } else if (isFormat24H()){
                jLabel_AmPm.setText(" ");
                if(horaActual.get(Calendar.HOUR_OF_DAY)<10){
                    horas="0"+String.valueOf(horaActual.get(Calendar.HOUR_OF_DAY));
                } else {
                    horas=String.valueOf(horaActual.get(Calendar.HOUR_OF_DAY));
                }
            }
                   
            //añadimos los minutos 
            if(horaActual.get(Calendar.MINUTE)<10){
                minutos="0"+String.valueOf(horaActual.get(Calendar.MINUTE));
            } else{
                minutos=String.valueOf(horaActual.get(Calendar.MINUTE));
            }
            
            //añadimos los segundos
            if(horaActual.get(Calendar.SECOND)<10){
              segundos="0"+String.valueOf(horaActual.get(Calendar.SECOND));  
            } else {
                segundos=String.valueOf(horaActual.get(Calendar.SECOND));
            }

            jTF_Hora.setText(horas);
            jTF_Minutos.setText(minutos);
            jTF_Segundos.setText(segundos);
            repaint();
            
            if (jCheckBox_Alarma.isSelected()){
                System.out.println("alarma= "+getAlarm().getHora()+":"+getAlarm().getMinutos());
                System.out.println("hora actual= "+horaActual.get(Calendar.HOUR_OF_DAY)+":"+horaActual.get(Calendar.MINUTE));
                
                if( getAlarm().getHora()==horaActual.get(Calendar.HOUR_OF_DAY)){
                    System.out.println("HHH bien");
                    
                    if( getAlarm().getMinutos()==horaActual.get(Calendar.MINUTE)){
                        System.out.println("MIN bien");
                        
                        if(horaActual.get(Calendar.SECOND)==0){
                            System.out.println("ALARMA");
                            JOptionPane.showMessageDialog(null
                                    ,"ALARMA"
                                    ,"ALARMA" 
                                    ,JOptionPane.INFORMATION_MESSAGE);
                            
                        }
                    } 
                } 
            }
            
            } 
        }
        );
        timer.start();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTF_Hora = new javax.swing.JTextField();
        jTF_Minutos = new javax.swing.JTextField();
        jTF_Segundos = new javax.swing.JTextField();
        jToolBar2 = new javax.swing.JToolBar();
        jCheckBox_Alarma = new javax.swing.JCheckBox();
        jSpinner_Alarma = new javax.swing.JSpinner();
        jB_EstablecerAlarma = new javax.swing.JButton();
        jTF_Hora1 = new javax.swing.JTextField();
        jTF_Hora2 = new javax.swing.JTextField();
        jLabel_AmPm = new javax.swing.JLabel();

        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTF_Hora.setEditable(false);
        jTF_Hora.setFont(new java.awt.Font("Wide Latin", 1, 36)); // NOI18N
        jTF_Hora.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTF_Hora.setText(" ");
        jTF_Hora.setBorder(null);
        jTF_Hora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTF_HoraActionPerformed(evt);
            }
        });

        jTF_Minutos.setEditable(false);
        jTF_Minutos.setFont(new java.awt.Font("Wide Latin", 1, 36)); // NOI18N
        jTF_Minutos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTF_Minutos.setText(" ");
        jTF_Minutos.setBorder(null);
        jTF_Minutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTF_MinutosActionPerformed(evt);
            }
        });

        jTF_Segundos.setEditable(false);
        jTF_Segundos.setFont(new java.awt.Font("Wide Latin", 1, 36)); // NOI18N
        jTF_Segundos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTF_Segundos.setText(" ");
        jTF_Segundos.setBorder(null);
        jTF_Segundos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTF_SegundosActionPerformed(evt);
            }
        });

        jToolBar2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar2.setRollover(true);

        jCheckBox_Alarma.setText("Alarma");
        jCheckBox_Alarma.setFocusable(false);
        jCheckBox_Alarma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jCheckBox_Alarma.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jCheckBox_Alarma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_AlarmaActionPerformed(evt);
            }
        });
        jToolBar2.add(jCheckBox_Alarma);

        jSpinner_Alarma.setFont(new java.awt.Font("Stencil", 1, 18)); // NOI18N
        jSpinner_Alarma.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(1495877597843L), null, null, java.util.Calendar.HOUR));
        jSpinner_Alarma.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSpinner_Alarma.setDoubleBuffered(true);
        jSpinner_Alarma.setEditor(new javax.swing.JSpinner.DateEditor(jSpinner_Alarma, "hh:mm  aaa"));
        jSpinner_Alarma.setEnabled(false);
        jSpinner_Alarma.setMinimumSize(null);
        jSpinner_Alarma.setName(""); // NOI18N
        jSpinner_Alarma.setPreferredSize(new java.awt.Dimension(120, 30));
        jToolBar2.add(jSpinner_Alarma);

        jB_EstablecerAlarma.setText("Establercer");
        jB_EstablecerAlarma.setEnabled(false);
        jB_EstablecerAlarma.setFocusable(false);
        jB_EstablecerAlarma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jB_EstablecerAlarma.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jB_EstablecerAlarma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_EstablecerAlarmaActionPerformed(evt);
            }
        });
        jToolBar2.add(jB_EstablecerAlarma);

        jTF_Hora1.setEditable(false);
        jTF_Hora1.setFont(new java.awt.Font("Wide Latin", 1, 36)); // NOI18N
        jTF_Hora1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTF_Hora1.setText(":");
        jTF_Hora1.setBorder(null);
        jTF_Hora1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTF_Hora1ActionPerformed(evt);
            }
        });

        jTF_Hora2.setEditable(false);
        jTF_Hora2.setFont(new java.awt.Font("Wide Latin", 1, 36)); // NOI18N
        jTF_Hora2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTF_Hora2.setText(":");
        jTF_Hora2.setBorder(null);
        jTF_Hora2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTF_Hora2ActionPerformed(evt);
            }
        });

        jLabel_AmPm.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        jLabel_AmPm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_AmPm.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel_AmPm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTF_Hora, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTF_Hora1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTF_Minutos, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTF_Hora2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTF_Segundos, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel_AmPm)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTF_Minutos, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTF_Hora2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTF_Segundos, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTF_Hora1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTF_Hora, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTF_HoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTF_HoraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTF_HoraActionPerformed

    private void jCheckBox_AlarmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_AlarmaActionPerformed
        if (jCheckBox_Alarma.isSelected()){
            getjSpinner_Alarma().setEnabled(true);
            jB_EstablecerAlarma.setEnabled(true);
            getAlarm().setActiva(true);
        } else {
            getjSpinner_Alarma().setEnabled(false);
            jB_EstablecerAlarma.setEnabled(false);
            getAlarm().setActiva(false);
        }
    }//GEN-LAST:event_jCheckBox_AlarmaActionPerformed

    private void jTF_SegundosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTF_SegundosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTF_SegundosActionPerformed

    private void jTF_MinutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTF_MinutosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTF_MinutosActionPerformed

    private void jTF_Hora1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTF_Hora1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTF_Hora1ActionPerformed

    private void jTF_Hora2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTF_Hora2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTF_Hora2ActionPerformed

    private void jB_EstablecerAlarmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_EstablecerAlarmaActionPerformed
        GregorianCalendar a = new GregorianCalendar();
        a.setTime((Date)getjSpinner_Alarma().getValue());
        horaAlarma=a.get(Calendar.HOUR_OF_DAY);
        minutosAlarma=a.get(Calendar.MINUTE);
        
        System.out.println("Alarma: "+horaAlarma+":"+minutosAlarma);
        
        getAlarm().setHora(horaAlarma);
        getAlarm().setMinutos(minutosAlarma);
        getAlarm().setActiva(true);
        getAlarm().setFormat24H(format24H);
        
    }//GEN-LAST:event_jB_EstablecerAlarmaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jB_EstablecerAlarma;
    private javax.swing.JCheckBox jCheckBox_Alarma;
    private javax.swing.JLabel jLabel_AmPm;
    private javax.swing.JSpinner jSpinner_Alarma;
    private javax.swing.JTextField jTF_Hora;
    private javax.swing.JTextField jTF_Hora1;
    private javax.swing.JTextField jTF_Hora2;
    private javax.swing.JTextField jTF_Minutos;
    private javax.swing.JTextField jTF_Segundos;
    private javax.swing.JToolBar jToolBar2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet.") ;
        
        //To change body of generated methods, choose Tools | Templates.
    
    }

    /**
     * @return the format24H
     */
    public boolean isFormat24H() {
        return format24H;
    }

    /**
     * @param format24H the format24H to set
     */
    public void setFormat24H(boolean format24H) {
        this.format24H = format24H;
        if(format24H){
            getjSpinner_Alarma().setEditor(new JSpinner.DateEditor(getjSpinner_Alarma(),"HH:mm     ")); 
        }else {
            getjSpinner_Alarma().setEditor(new JSpinner.DateEditor(getjSpinner_Alarma(),"hh:mm  aaa")); 
        }
        
    }

    /**
     * @return the alarm
     */
    public Alarma getAlarm() {
        return alarm;
    }

    /**
     * @param alarm the alarm to set
     */
    public void setAlarm(Alarma alarm) {
        //this.alarm = alarm;
        this.alarm.setHora(alarm.getHora());
        this.alarm.setMinutos(alarm.getMinutos());
   }

    
    public void setAlarm(int h, int m, boolean a, boolean b){
        alarm.setHora(h);
        alarm.setMinutos(m);
        alarm.setFormat24H(a);
        alarm.setActiva(b);
    }
    
    
    
    
    
    
    /**
     * @return the jSpinner_Alarma
     */
    public javax.swing.JSpinner getjSpinner_Alarma() {
        return jSpinner_Alarma;
    }

    /**
     * @param jSpinner_Alarma the jSpinner_Alarma to set
     */
    public void setjSpinner_Alarma(javax.swing.JSpinner jSpinner_Alarma) {
        this.jSpinner_Alarma = jSpinner_Alarma;
    }

    /**
     * @return the color
     */
    public Color getColor() {
        return jTF_Hora.getBackground();
    }

    /**
     * @param color the color to set
     */
    public void setColor(Color color) {
        this.color = color;
        jTF_Hora.setForeground(color);
        jTF_Hora1.setForeground(color);
        jTF_Hora2.setForeground(color);
        jTF_Minutos.setForeground(color);
        jTF_Segundos.setForeground(color);
        jLabel_AmPm.setForeground(color);
               
    }

    

    

    
    
        
    
}
